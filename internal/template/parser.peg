{ 
    package parser


func toAnySlice(v any) ([]any, bool) {
	if v == nil {
		return nil, false
	}
	newV, ok := v.([]any)
	return newV, ok
}
}

Start <- top:Seq EOF {
	return top, nil
} 


// Seq <- v:(( IfElse / If / For / TextBlock / Accessor ) Seq / "") {
Seq <- v:(( IfElse / If / For / TextBlock / Accessor ) Seq / "") {
	vals, ok := toAnySlice(v)
	if !ok {
		return nil, nil
	} else {
		left, _ := vals[0].(node)
		right, _ := vals[1].(node)

		left.setNext(right)

		return left, nil	
	}	
}   

TextBlock <- t:Text {
	text := t.(string)
	node := textNode{text: text, baseNode: baseNode {child: nil}}
	return &node, nil
}


Accessor <- S _  e:Element _ S {
	elem := e.(element)
	return &accessNode{accessorElement:elem, baseNode: baseNode{child:nil}}, nil 
}

// Function
Element <- e:(Constant / UserFunction / AccessElement ) {
	return e, nil 
}


AccessElement <- !(Special / S) ([a-zA-Z0-9] / "->" / "[" / "]")+ {
	text := string(c.text)
	return accessElement{pattern: text}, nil

}

IfElse <- S _ "if" _ cond:OrCondition _ S _ tr:Seq os:(S _ "else" _ "if" _ OrCondition _ S _ Seq _)+ el:(S _ "else" _ S  _ Seq _ )? S _ "end" _  S {
	other, _  := toAnySlice(os)
	topCondition := cond.(condition)
	topTrue := tr.(node)


	top := &ifNode{condition: topCondition, trueClause: topTrue, baseNode: baseNode{child:nil}}
	toRet := top 

	for _, elseClause := range other {
		
		var elseTrue node 
		var elseCondition condition 
		elseClauseElems, _ := toAnySlice(elseClause)

		for _, elem := range elseClauseElems {
			if elseCondition == nil {
				elseCondition, _ = elem.(condition)
			} else if elseTrue == nil {
				elseTrue, _ = elem.(node) 
			} 
		}

		
		elseNode := &ifNode{condition: elseCondition, trueClause: elseTrue, baseNode: baseNode{child:nil}}
		top.falseClause = elseNode
		top = elseNode
	}	

	if el != nil {
		elems, _ := toAnySlice(el)
		var falseClause node 

		for _, e := range elems {
			if falseClause == nil {
				falseClause, _ = e.(node)
			}
		}

		top.falseClause = falseClause	
	}

	return toRet, nil 

}

If <- S _ "if" _ cond:OrCondition _ S tr:Seq _ f:(S _ "else" _ S _ Seq)? S _ "end" _ S {
	condition := cond.(condition)
	trueClause := tr.(node)
	var falseClause node 

	if f != nil { 
		vals, _ := toAnySlice(f)
		falseClause, _ = vals[4].(node)
	}

	node := ifNode{condition: condition, trueClause: trueClause, falseClause: falseClause, baseNode: baseNode{child: nil}}
	return &node, nil 
}

For <- S _ "for" _ vars:ForVars _ "=" _ t:("range" / "props") _ p:Element _ S _ l:Seq S _ "end" _ S {
	stringVars := vars.([]string)
	loop := l.(node)
	element := p.(element)

	forType := string(t.([]byte))

	foraa := forNode{ forType: forType == "range", itemName: stringVars[1], indexName: stringVars[0], pattern: element, loop: loop, baseNode : baseNode{child: nil}} 
	return &foraa, nil
}

ForVars <- v1:VarName _ "," _ v2:VarName {
	vstr1, _ := v1.(string)
	vstr2, _ := v2.(string)
	return []string{vstr1, vstr2}, nil
}

VarName <- [a-zA-Z]+ {
	varName := string(c.text)
	return varName, nil
}

// // Extract <- "extract" _ VarName ("," _ VarName)* _ regex


UserFunction <- n:VarName "(" _ p:( Element  ("," _ Element)*)? _  ")" {


	name, _ := n.(string)
	paramsAny, _ := toAnySlice(p)
	firstParam, _ := paramsAny[0].(element)
	restAny, _ := toAnySlice(paramsAny[1])

	functionParams := []element{firstParam}

	for _, param := range restAny {
		paramNode, isNode := param.(element)
		if isNode {
			functionParams = append(functionParams, paramNode)
		}
	} 	

	return &userFunc{ name: name, parameters: functionParams}, nil 
} 


OrCondition <- base:AndCondition os:( _ "or"  _ AndCondition)* {
	baseCondition, _ := base.(condition)
	others, _ := toAnySlice(os) 



	if others == nil {
		return baseCondition, nil 
	}

	curr := baseCondition

	for _, other := range others {
		components, _ := toAnySlice(other)
		condition, _ := components[3].(condition)	
		top := orCondition{left: curr, right: condition} 
		curr = top
	}


	return curr, nil

}

AndCondition <- base:Condition os:( _ "and" _  Condition)* {
	baseCondition, _ := base.(condition)
	others, _ := toAnySlice(os) 


	if others == nil {
		return baseCondition, nil 
	}

	curr := baseCondition

	for _, other := range others {
		components, _ := toAnySlice(other)
		condition, _ := components[3].(condition)	
		top := andCondition{left: curr, right: condition} 
		curr = top
	}

	return curr, nil

}

Condition <- e:( OfType / Exists / FromElements / ("!")? GroupedCondition) {

	elems, isGroup := toAnySlice(e)

	if !isGroup {
		return e, nil 
	}

	isNegated := elems[0] != nil 
	cond, _ := elems[1].(condition)

	if isNegated {
		return negatedCondition{toNegate: cond}, nil
	} 

	return cond, nil 
	
}

OfType <-  el:Element _ "isa" _ e:TypeExpression {
	elemType, _ := e.([]byte)
	strType := string(elemType)
	elem, _ := el.(element)
	return ofType{element: elem, typeOf: convertType(strType)}, nil
}

TypeExpression <- "array" / "object" / "number" / "string" / "bool" 

Exists <- "exists" _ p:Element {
	element, _ := p.(element)
	return existsCondition{element: element}, nil
}


GroupedCondition <- "(" _ cond:OrCondition _ ")" {
	return cond, nil 
}

FromElements <- e:(Element _ Operator _ Element / ("!"?) Element) {
	elems, _ := toAnySlice(e)

	isOperation := len(elems) == 5

	if isOperation {
		left, _ := elems[0].(element)
		right, _ := elems[4].(element)
		operator, _ := elems[2].([]uint8)
		return operatorCondition{left: left, right: right, operator: convertOperator(string(operator))}, nil 
	}
	
	isElem := len(elems) == 2

	if isElem {
		elem, _ := elems[1].(element)
		elemCondition := singleCondition{element: elem}
		if elems[0] == nil {
			return elemCondition, nil
		} else {
			return negatedCondition{toNegate: elemCondition}, nil
		}

	} 

	condition, isCondition := e.(condition)

	if isCondition {
		return condition, nil 
	}

	return nil, errors.New("Invalid condition")
}

Operator <- "=" / "<=" / ">=" / "<" / ">" / "!="

Text <- [^$]+  {
	text :=  string(c.text)
	return text, nil
}

Special <- "for" / "if" / "range" / "props" / "exists" / "end" / "else" 

S <- "$"

_ "whitespace" <- [ \t\r\n]*

EOF <- !.


Constant <- ('"' [^"]* '"' / "-"? [0-9]+("." [0-9]+)? / "true" / "false") { 
	text := string(c.text)
	return constantElement{constant: text}, nil 

}



